#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#-------------------------------------------------------------------------------
#			SESSION FILE GENERATED BY
#-------------------------------------------------------------------------------
#	Product			:  Visual Environment 14.5  
#	Date			:  
#	Directory  Location	:   
#	Support			:  ESI Software
#				:  99, rue des Solets,
#				:  SILIC 112,
#				:  94513 Rungis Cedex, France
#				:  Phone: +33 (0)1 41 73 58 00
#				:  http://www.esi-group.com
#-------------------------------------------------------------------------------
null='' 
from VgPoint3 import *
from VgPoint2 import *
from VgMatrix import *
import VScn
import VGuiUtl
import VBrowserManager
import VExpMngr
import VCmdGui
import VCmd
import VCmdFramework
import VMaterial
import VMeshMdlr
import VToolKit
import VistaDb
NULL=VistaDb.PythonCNULL() 
import VistaDb
import VHostManager
import VE
import numpy as np
import math

#required inputs
meshsize = 2
#mesh_info = np.load(r"C:\IDPcode\pamrtm\testfiles\mesh_info.npy")

with open("D:\\sysyi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
    text_file.write("toolbox initiated\n")
    
lPath_auto='D:\sysi'

#input file - instead function arguments - which are not possible due to the command line passing
fl = open("D:\\sysi\\Temporary\\RTM_in.txt", "rt")
flstr = fl.read() 
RTMfile = flstr.split("---")[1]
MeshFile = flstr.split("---")[0]+"_JK"
resin = flstr.split("---")[2]
I_T = float(flstr.split("---")[3])
T_T = float(flstr.split("---")[4])
I_P = float(flstr.split("---")[5])
V_P = float(flstr.split("---")[6])
FR = float(flstr.split("---")[7])
INITIAL = int(flstr.split("---")[10])
RTMF = flstr.split("---")[11]
NL = float(flstr.split("---")[12])
span = float(flstr.split("---")[13])
filename = MeshFile+".igs"


def vecL(vector):
    vecLen = np.sqrt(vector[0]**2+vector[1]**2+vector[2]**2)
    return(vecLen)

def GlobalToLocal(point1,point2,cSYS1,cSYS2,GCP):
    #Find global coordinates of a point (GCP) relative to an secondary coordinate system.
    #cSYS1 is the original coordinate system in which GCP is stated
    #cSYS2 is the secondary coordinate system in which the point is to be expressed
    #print(point1,point2,cSYS1,cSYS2,GCP)
    i = 0
    p1 = point2
    # i loops through first vectors 
    shift = np.zeros([3,3])
    while i<3:
        ii =0 
        # ii loops through second system of vectors
        while ii<3:
            p2 = p1 + cSYS2[ii,:]*10
            #print("p2",p2)
            #makes original vector into unit vector
            oV = cSYS1[i,:]
            oVmag = (oV[0]**2 +oV[1]**2 +oV[2]**2)**(1/2)
            unitV = oV/oVmag
            
            #the main math http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
            p0 = p1 + unitV
            #print("p0",p0)
            d1 = vecL(np.cross((p0-p1),(p0-p2)))/vecL(p2-p1)
            #prevent errors offseting plane
            d1 = min(1,(d1))
            #print("d1",d1)
            effectD = math.sqrt(1-d1**2)
            if cSYS2[i,ii] < 0:
                effectD = effectD*-1

            #how much does unit vector of x1 influence vector x2, how much does unit vector x1 influence y2.... (first row)
            #how much does unit vector of y1 influence vector x2.... (second row...)
            shift[i,ii] = effectD

            ii = ii+1
        i=i+1
    #expression of point position relative to new refference point, with old coordinates
    diff = GCP - (point2-point1)
    
    #nice and neat, same as below, but cannot be used in python 2.7/Abaqus
    #LCP = np.matmul(shift,np.transpose(diff))
    
    #lenghty matrix multiplication
    x = shift[0,0]*diff[0]+shift[0,1]*diff[1]+shift[0,2]*diff[2]
    y = shift[1,0]*diff[0]+shift[1,1]*diff[1]+shift[1,2]*diff[2]
    z = shift[2,0]*diff[0]+shift[2,1]*diff[1]+shift[2,2]*diff[2]
    LCP = [x,y,z]
    #print(LCP)
    return(LCP)

with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
    text_file.write("______NewRun-_____"+filename+"_________\n")

def initiate(filename):
    #Basic settings and opening mesh-file.
    
    #__________________ VhmCommand BEGIN __________________
    var1=VCmd.Activate( 1, r"VHostManagerPlugin.VhmInterface", r"VhmCommand" )
    #__________________ SessionCommand BEGIN __________________
    var2=VCmd.Activate( 1, r"VSessionManager.Command", r"SessionCommand" )
    #__________________ VEAction BEGIN __________________
    var3=VCmd.Activate( 1, r"VToolKit.VSectionCutInterface", r"VEAction" )
    ret=VE.ChangeContext( r"Visual-RTM" ) #¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬remove evenetually
    VE.SetActiveWindow( r"p1w1" )
    ret=VE.ChangeContext( r"Visual-Mesh" )
    ret=VE.ChangeSkin( r"General" )
    #__________________ ModelingTolerance BEGIN __________________
    var4=VCmd.Activate( 0, r"VMeshModeler.VmmICommandGui", r"ModelingTolerance" )
    VCmd.SetIntValue( var4, r"ScaleModelToMMSystem", 0 )
    VCmd.SetIntValue( var4, r"KeepFailedCADEntities", 1 )
    VCmd.SetIntValue( var4, r"CheckUnitFlagAndNameToScaleModel", 0 )
    VCmd.SetIntValue( var4, r"KeepBlankCADEntities", 1 )
    VCmd.SetIntValue( var4, r"CleanSelfIntersectingSurfaces", 1 )
    VCmd.SetIntValue( var4, r"StitchSurfaces", 1 )
    VCmd.SetIntValue( var4, r"SurfaceStitchToleranceOption", 1 )
    VCmd.SetIntValue( var4, r"CreatePartsByColor", 0 )
    VCmd.SetIntValue( var4, r"ReadSubFigAsPartsOrAsm", 4 )
    VCmd.SetIntValue( var4, r"RemovePointsAndCurves", 0 )
    VCmd.SetIntValue( var4, r"CadAccuracyLevel", 0 )
    VCmd.SetIntValue( var4, r"MergeLoopCurves", 1 )
    VCmd.Accept( var4 )
    VCmd.Quit( var4 )
    #__________________ ModelingTolerance END __________________
    #__________________ ModelingTolerance BEGIN __________________
    var5=VCmd.Activate( 0, r"VMeshModeler.VmmICommandGui", r"ModelingTolerance" )
    VCmd.Quit( var5 )
    #__________________ ModelingTolerance END __________________
    ret=VExpMngr.LoadFile( "D:\\sysi\\catiafiles\\meshfiles\\"+filename, 4 )
    VE.SetCurrentPage( 1 )
    
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("initiated\n")
    return(var1)
    
    
def asnSurf(var1,INITIAL):
    #For each section create a list of surfaces that correspond to it
    #assign it as new part.
    BCs = np.loadtxt(open("D:\\sysi\\temporary\\braidsegments.csv", "rb"), delimiter=",")
    if INITIAL == 0:
        surf_mat = np.load(r"D:\\sysi\\temporary\\RTM_surfaces.npy")
    elif INITIAL == 1:
        surf_mat = np.load(r"D:\\sysi\\temporary\\RTM_surfaces_2.npy")
    else:
        print("something went horribly wrong")
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("yupgogoyup\n")
        
    refPTS = np.loadtxt(open("D:\\sysi\\temporary\\secPTS.csv","rb"), delimiter=",")
    secVECz = np.loadtxt(open("D:\\sysi\\temporary\\secVECz.csv","rb"), delimiter=",")
    secVECy = np.loadtxt(open("D:\\sysi\\temporary\\secVECy.csv","rb"), delimiter=",")
    secPTS = refPTS    
    ret=VE.ChangeContext( r"Visual-RTM" )
    VE.SetActiveWindow( r"p1w1" )
    
    #The points section reference points are provided in local coordinate systems.
    #Therefore the surface coordinate systems have to be also translated, 
    #globalToLocal function is used.
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("yupyup\n")
    step = refPTS[0,2]
    u = 0
    while u < np.size(surf_mat,0):
        uu = 0
        while uu < np.size(refPTS,0):
            if refPTS[uu,2]-step <= surf_mat[u,3] <= refPTS[uu,2]+step:
                secVECx = np.cross(secVECy[uu,:],secVECz[uu,:])
                cSYS2 = np.array(([secVECx[0],secVECx[1],secVECx[2]],[secVECy[uu,0],secVECy[uu,1],secVECy[uu,2]],[secVECz[uu,0],secVECz[uu,1],secVECz[uu,2]]))
                point1 = np.array([0,0,0])
                point2 = np.array([secPTS[uu,0],secPTS[uu,1],secPTS[uu,2]])
                cSYS1 = np.array(([1,0,0],[0,1,0],[0,0,1]))
                GCP = np.array([surf_mat[u,1],surf_mat[u,2],surf_mat[u,3]])
                kopyto = GlobalToLocal(point1,point2,cSYS1,cSYS2,GCP)
                surf_mat[u,1] = kopyto[0]
                surf_mat[u,2] = kopyto[1]     
            uu = uu + 1
        u = u + 1
    np.savetxt("D:\\sysi\\Temporary\\verify_toolbox.csv",surf_mat,delimiter=",")
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("eaiho\n")
    
    #Match surfaces to parts.
    i = 0
    US = []
    while i < 240:
        ii = 0

        stringASN = "  MFace  "
        while ii < np.size(surf_mat,0) :
            if (BCs[i,2]< surf_mat[ii,1] <BCs[i,1]) and (BCs[i,4] < surf_mat[ii,2] < BCs[i,3]) and (BCs[i,6] < surf_mat[ii,3] < BCs[i,5]):
                stringASN = stringASN+r"@0/@"+str(int(surf_mat[ii,0]))+" "
                surf_mat = np.delete(surf_mat, (ii), axis=0)
                ii = ii - 1
            ii = ii + 1
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("ssssss"+stringASN+"\n")
        if stringASN =="  MFace  ":
            US.append(BCs[i,0])
        VE.SetCurrentPage( 1 )
        ret=VE.ModelChange( "M  @0" )
        lst1_count,lst1 =  VScn.List( "  P 10000 "  )
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        ret=VCmd.ExecuteCommand( var1, r"EndSelection" )
        VCmd.SetStringValue( var1, r"TargetName", r"Surface" )
        lst1_count,lst1 =  VScn.List( "  MFace  @0/@1026 "  )
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        lst1_count,lst1 =  VScn.List( stringASN )         
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        lst1_count,lst1 =  VScn.List( stringASN )
        VMaterial.VMeCadDataMove( lst1_count, lst1, NULL )
        VExpMngr.RefreshExplorer( r"Parts" )
        VExpMngr.RefreshExplorer( r"Elements" )           
        i = i + 1
        
    with open(r"D:\\sysi\\temporary\\RTM_surf_matRR.txt", "w") as text_file:
        text_file.write(str(surf_mat))
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("surfaces assigned\n")
    
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\vcelkamaja.vdb", 0 )
    
    #Below adds flow mesh surface if already available.
    if INITIAL == 1:
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("flow mesh surface 1\n")
        FM_surf = np.load(r"D:\\sysi\\temporary\\FM_surfaces.npy")
        
        ret=VE.ChangeContext( r"Visual-RTM" )
        VE.SetActiveWindow( r"p1w1" )   
        ii = 0
        stringASN = "  MFace  "
        while ii < len(FM_surf) :
            
            stringASN = stringASN+r"@0/@"+str(int(FM_surf[ii,0]))+" "
        
            ii = ii + 1
            #stringASN = stringASN+r""""  )""                                
        VE.SetCurrentPage( 1 )
        ret=VE.ModelChange( "M  @0" )
        lst1_count,lst1 =  VScn.List( "  P 10000 "  )
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        ret=VCmd.ExecuteCommand( var1, r"EndSelection" )
        VCmd.SetStringValue( var1, r"TargetName", r"Surface" )
        lst1_count,lst1 =  VScn.List( stringASN )         
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        VMaterial.VMeCadDataMove( lst1_count, lst1, NULL )
        VExpMngr.RefreshExplorer( r"Parts" )
        VExpMngr.RefreshExplorer( r"Elements" )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("flow mesh surfaces assigned\n")    
        VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\broukpytlik.vdb", 0 )
        
    return(US)
    
def automesh(meshsize,RTMfile,RTMF):
    #Automatically generates mesh for the simulation.
    ret=VE.ChangeContext( r"Visual-Mesh" )
    ret=VE.ChangeSkin( r"General" )
    VE.SetActiveWindow( r"p1w1" )
    #__________________ TopologyMesh BEGIN __________________
    var6=VCmd.Activate( 1, r"VMeshModeler.VmmICommandGui", r"TopologyMesh" )
    #var7=VCmdGui.Create( r"VModelValidate.VCommandEleGeom" )
    VCmd.SetObjectValue( var6, r"CurrentModel", "M  @0" )
    VCmd.SetDoubleValue( var6, r"ElementSize", meshsize  )
    #VCmd.SetObjectValue( var6, r"SplitEdge1", NULL )
    ret=VCmd.ExecuteCommand( var6, r"SetElementSizeToAllEdges" )
    VCmd.SetIntValue( var6, r"MeshType", 2 )
    VCmd.SetObjectValue( var6, r"SplitEdge1", NULL )
    ret=VCmd.ExecuteCommand( var6, r"MeshAllFaces" )
    VCmd.Cancel( var6 )
    VistaDb.ModelSetExportKeyWordOrder( "M  @0", 0 )
    VistaDb.ModelSetExportStateAsNoInclude( "M  @0", 1 )
    VExpMngr.ExportFile( r"D:\\sysi\\pamrtm\\mainSimFiles\\"+RTMF+".inp", 34 )
    
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("meshed\n")
    
def simPar(resin):
    #Specify the RTM parameters.
    VE.SetActiveWindow( r"p1w1" )
    ret=VE.ChangeContext( r"Visual-RTM" )
    var116=VCmd.Activate( 1, r"VRTMUtilities.VRTMInterface", r"SimulationParameters" )
    VCmd.SetStringValue( var116, r"Physics", r"Heated Filling" )
    VCmd.SetDoubleValue( var116, r"InitialDegreeOfCure", 0.035  )
    VCmd.SetStringValue( var116, r"MaterialDB", r"User" )
    VCmd.SetStringValue( var116, r"InjectedResin", resin )
    VCmd.SetIntValue( var116, r"DetectAirTraps", 1 )
    VCmd.Accept( var116 )
    VCmd.Quit( var116 )  
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("simulation parameters selected\n")
    
def rosalia(ros_nodes):
    #Creates a coordinate system for each of the 12 segments around cross-section.
    i = 0
    while i < 12:
        x = ros_nodes[i,1]
        y = ros_nodes[i,2]
        z = ros_nodes[i,3]
        NODE = ros_nodes[i,0]
        #__________________ RosetteCreation BEGIN __________________
        var12=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"RosetteCreation" )
        VCmd.SetIntValue( var12, r"Mode", 0 )
        VCmd.SetObjectValue( var12, r"CurrentModel", "M  @0" )
        VCmd.SetIntValue( var12, r"Type", 22 )
        #VCmd.SetStringValue( var12, r"RosetteName", r"Rosette_1" )
        nm = "o_ros_"+str(i)
        VCmd.SetStringValue( var12, r"RosetteName", nm )
        sNODE = "  N "+str(NODE)+" "
        lst1_count,lst1 =  VScn.List( sNODE  )
        VCmd.SetObjectArrayValue( var1, r"GraphicSelection",  lst1_count , lst1 )
        sNODE = "N "+str(NODE)
        VCmd.SetObjectValue( var12, r"OriginNode", sNODE )
        VCmd.SetIntValue( var12, r"PickOption", 1 )
        #point 1 refers to a point in one of the root sections
        p1 = str(x)+" "+str(y)+" "+str(z)+" "
        #point 2 helps define x axis
        p2 = str(x)+" "+str(y)+" 60 "
        #Point 3 adds a point which lands on x-y plane, this is dependent on
        #which section around the cross section is refered to.
        p3 = "no p3 was assigned"
        if i == 4 or i == 5 or i ==10 or i ==11:
            p3 = "0. "+str(y)+" 60 "
        elif i == 1 or i == 2 or i == 7 or i ==8:
            p3 = str(x)+" 0. 60 "  
        elif i == 0 or i ==6:
            x1 = x + 1
            y1 = y + 1
            z1 = z + 1
            p3 = str(x1)+" "+str(y1)+" "+str(z1)+" "
        elif i == 3 or i == 9:
            x1 = x + 1
            y1 = y - 1
            z1 = z + 1
            p3 = str(x1)+" "+str(y1)+" "+str(z1)+" "
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("p1"+str(p1)+"\n")
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("p2"+str(p2)+"\n")
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("p3"+str(p3)+"\n")
        VCmd.SetPoint3Value( var12, r"OriginPoint", p1 )
        VCmd.SetPoint3Value( var12, r"XAxisPoint", p2 )
        VCmd.SetPoint3Value( var12, r"XYPlanePoint", p3 )
        VCmd.Accept( var12 )
        VCmd.Quit( var12 )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("Direction set\n")
        i = i + 1
    
def defMat():
    K = np.loadtxt(open("D:\\sysi\\temporary\\BraidData.csv", "rb"), delimiter=",")
    i = 0
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("K:\n"+str(K)+"\n")
    while i < 240:
        var6=VCmd.Activate( 1, r"VMaterial.VMaterialInterface", r"GenericMaterialEditor" )
        ret=VCmd.ExecuteCommand( var6, r"MaterialNamingSystem" )
        VCmd.SetStringValue( var6, r"SelectDb", r"User" )
        VCmd.SetStringValue( var6, r"ActiveFolderClassID", r"Reinforcement" )
        VCmd.SetStringValue( var6, r"FolderPath", r"Reinforcement" )
        VCmd.SetStringValue( var6, r"ActiveClass", r"Reinforcement" )
        VCmd.SetStringValue( var6, r"ActiveMaterial", r"y"+str(i)+"y" )
        VCmd.SetStringValue( var6, r"ActiveCategoryTab", r"General" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"Permeability" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_General" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"MatmlProp_ANISO_2_PERMEABILITY" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_General" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"Permeability" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_General" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"m^2" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", str(K[i,10]) )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"MatmlProp_ANISO_2_PERMEABILITY" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_General" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"m^2" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", str(K[i,11]) )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"Density" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_General" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"kg/m^3" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", r"      1780" )
        VCmd.SetStringValue( var6, r"ActiveCategoryTab", r"Thermal" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"Thermal_conductivity" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_Thermal" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"W/m-K" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", r"        0.32" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"MatmlProp_2_THERMAL_CONDUCTIVITY" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_Thermal" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"W/m-K" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", r"        0.32" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"MatmlProp_3_THERMAL_CONDUCTIVITY" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_Thermal" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"W/m-K" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", r"        0.32" )
        VCmd.SetStringValue( var6, r"ActiveProperty", r"Specific_heat_capacity" )
        VCmd.SetStringValue( var6, r"ActiveModelID", r"RTM_Thermal" )
        VCmd.SetStringValue( var6, r"PropertyValueUnit", r"J/kg-K" )
        ret=VCmd.ExecuteCommand( var6, r"UpdateParamForUnit" )
        VCmd.SetStringValue( var6, r"PropertySValue", r"      1599" )
        ret=VCmd.ExecuteCommand( var6, r"Save" )
        VCmd.Accept( var6 )
        #VCmd.Quit( var6 )      
        i = i + 1
        
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("reinforcement materials created\n")
    
def layupManager(var1,INITIAL,US,NL):
    #This is the main bottleneck of model recreation.
    #It matches materials with parts.
    
    #__________________ RtmLayerDesignManager BEGIN __________________
    var1000=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"RtmLayerDesignManager" )
    VCmd.SetGuStringValue( var1000, r"LayerLaminateListFlag", r"LayerList" )    
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\morgiana.vdb", 0 )
    n = 0
    i = 1
    #Works for 240 segments, rework will be required if alternative number of 
    #segments are required.
    while i < 241:   
        if i in US:
            n = n + 1
            i = i + 1      
        noa = i - n
        #Adjust number for string requirement.
        if noa < 10:
            I = "00"+str(noa)
        elif 10 <= noa <100:
            I = "0"+str(noa)
        else:
            I = noa        
        row = noa - 1
        mrm = i - 1
        VCmd.SetIntValue( var1000, r"SelectedRowForAssignment", row )
        lst1_count,lst1 =  VScn.StringList( r" 10"+str(I)+"/PART_10"+str(I)+"  "  )        
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        VCmd.SetStringValue( var1000, r"SelectedPartIds", r"10"+str(I)+"" )
        ret=VCmd.ExecuteCommand( var1000, r"TransferPartsToInterfaceList" )
        VCmd.SetGuStringValue( var1000, r"LayerLaminateListFlag", r"LayerList" )
        VCmd.SetGuStringValue( var1000, r"PlyReinforcementLaminate", r"Reinforcement" )
        VCmd.SetDoubleValue( var1000, r"LayerThickness", 0.5  )
        VCmd.SetStringValue( var1000, r"MatDBFilter", r"User" )
        VCmd.SetStringValue( var1000, r"MatTypeFilter", r"Reinforcement" )
        VCmd.SetStringValue( var1000, r"MatNameFilter", r"y"+str(mrm)+"y" )
        VCmd.SetIntValue( var1000, r"SameMatAssignmentOtherLayerFlag", 7 )
        ret=VCmd.ExecuteCommand( var1000, r"TransferMaterialToInterfaceList" )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("Material and Part matched__"+str(i)+"\n")       
        
        i = i + 1     
    
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\xxx1.vdb", 0 )
    VCmd.Accept( var1000 ) 
    VCmd.Quit( var1000 )
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\xxx2.vdb", 0 )
    #because part 16 does never work for some reason (delete below if run works without...)
    var13=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"RtmLayerDesignManager" )
    VCmd.SetIntValue( var13, r"SelectedRowForAssignment", 239 )
    lst1_count,lst1 =  VScn.StringList( r" 10016/PART_10016  "  )
    VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
    VCmd.SetStringValue( var13, r"SelectedPartIds", r"10016" )
    ret=VCmd.ExecuteCommand( var13, r"TransferPartsToInterfaceList" )
    VCmd.SetStringValue( var13, r"MatTypeFilter", r"Reinforcement" )
    VCmd.SetDoubleValue( var13, r"LayerThickness", 0.5  )
    VCmd.SetStringValue( var13, r"MatNameFilter", r"y15y" )
    VCmd.SetIntValue( var13, r"SameMatAssignmentOtherLayerFlag", 7 )
    VCmd.SetGuStringValue( var13, r"SameMatAssignmentOtherLayer", r"False" )
    ret=VCmd.ExecuteCommand( var13, r"TransferMaterialToInterfaceList" )
    VCmd.Accept( var13 )
    VCmd.Quit( var13 )
 
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("all non-flow mewsh related layers done\n")
    
    #For re-runs due to mesh addition:
    if INITIAL == 1:
        noa = noa + 1
        if noa < 10:
            I = "00"+str(noa)
        elif 10 <= noa <100:
            I = "0"+str(noa)
        else:
            I = noa        
        var13=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"RtmLayerDesignManager" )
        VCmd.SetIntValue( var13, r"SelectedRowForAssignment", 240 )
        lst1_count,lst1 =  VScn.StringList( r" 10"+str(I)+"/PART_10"+str(I)+"  "  )   
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        VCmd.SetStringValue( var13, r"SelectedPartIds", r"10"+str(I)+"" )
        ret=VCmd.ExecuteCommand( var13, r"TransferPartsToInterfaceList" )
        VCmd.SetStringValue( var13, r"MatTypeFilter", r"Reinforcement" )
        VCmd.SetStringValue( var13, r"MatNameFilter", r"flowMesh" )
        VCmd.SetDoubleValue( var13, r"LayerThickness", 0.5  )
        VCmd.SetIntValue( var13, r"SameMatAssignmentOtherLayerFlag", 7 )
        VCmd.SetGuStringValue( var13, r"SameMatAssignmentOtherLayer", r"False" )
        ret=VCmd.ExecuteCommand( var13, r"TransferMaterialToInterfaceList" )
        VCmd.Accept( var13 )
        VCmd.Quit( var13 )
    
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("layup manager done\n")
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\xxx3.vdb", 0 ) 
    
    K = np.loadtxt(open("D:\\sysi\\temporary\\BraidData.csv", "rb"), delimiter=",")
    
    i = 0
    while i < 240:
        var6=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"RtmLayerDesignManager" )
        VCmd.SetGuStringValue( var6, r"LayerLaminateListFlag", r"LayerList" )
        VCmd.SetIntValue( var6, r"SelectedRowForAssignment", i )        
        VCmd.SetGuStringValue( var6, r"LayerName", r"Layer_"+str(i+1)+"" )    
        th = float(K[i,13])*NL
        VCmd.SetDoubleValue( var6, r"LayerThickness", th  )       
        VCmd.SetGuStringValue( var6, r"LayerLaminateListFlag", r"LayerList" )         
        VCmd.SetGuStringValue( var6, r"LayerName", r"Layer_"+str(i+1)+"" )         
        VCmd.SetDoubleValue( var6, r"VolumeFraction", float(K[i,12])  )        
        VCmd.Accept( var6 )
        VCmd.Quit( var6 )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("test"+str(i)+"\n")
        i = i + 1
        
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\xxx4.vdb", 0 )
    
def oPart(RTMF):
    #Matching segments to the appropriate rosettes.
    #First loop creates parts with wrong rosette assigned. 
    i = 0
    while i < 240:        
        var10=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"PartOrientationDefinition" )
        VCmd.SetObjectValue( var10, r"CurrentModel", "M  @0" )
        VCmd.SetIntValue( var10, r"OrientMethod", 0 )
        #Adjusting the integers to fit within the string.
        k = i + 1
        if k < 9.5:
            I = "00"+str(k)
        elif 9.5 < k <99.9:
            I = "0"+str(k) 
        else:
            I = str(k)
    
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write(r" 10"+I+"/PART_10"+I+"  ""\n")
        ret=VCmd.ExecuteCommand( var10, r"CreateNewOrientation" )
        lst1_count,lst1 =  VScn.StringList( r" 10"+I+"/PART_10"+I+"  "  )
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        lst1_count,lst1 =  VScn.List( "  P 10"+I+" "  )
        VCmd.SetObjectArrayValue( var10, r"PartSelection", lst1_count, lst1 )
        ret=VCmd.ExecuteCommand( var10, r"TransferPartsToOriList" )
        VCmd.SetIntValue( var10, r"SimulationCheck", 1 )
        ret=VCmd.ExecuteCommand( var10, r"SimulateOrientMethod" )
        lst1_count,lst1 =  VScn.StringList( r" 5=>o_ros_4  "  )
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        VCmd.SetIntValue( var10, r"RosetteId", 1)
        VCmd.SetIntValue( var10, r"SimulationCheck", 1 )
        ret=VCmd.ExecuteCommand( var10, r"SimulateOrientMethod" )
        ret=VCmd.ExecuteCommand( var10, r"TransferAxisPtCrvToOriList" )
        VCmd.Accept( var10 )
        i = i + 1 
    
    #Second corrective loop adds correct rosette to each line.
    #The separation might not be necessary, but for whatever reason adding the 
    #rosette when each line in the table is created is inconsistent.
    i = 0 
    while i < 240:
        ni = i 
        san = i +1
        hachi = i % 12
        kyu = hachi +1   
        #__________________ PartOrientationDefinition BEGIN __________________
        var4=VCmd.Activate( 1, r"VCompUtils.VCompUtilsCmdInterface", r"PartOrientationDefinition" )
        VCmd.SetObjectValue( var4, r"CurrentModel", "M  @0" )
        VCmd.SetIntValue( var4, r"SelectedInterfaceRow", ni )
        VCmd.SetObjectValue( var4, r"Orientation", "ORI  "+str(san)+"" )
        lst1_count,lst1 =  VScn.StringList( r" "+str(kyu)+r"=>o_ros_"+str(hachi)+r"  "  )
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        VCmd.SetIntValue( var4, r"RosetteId", kyu )
        VCmd.SetIntValue( var4, r"SimulationCheck", 1 )
        ret=VCmd.ExecuteCommand( var4, r"SimulateOrientMethod" )
        ret=VCmd.ExecuteCommand( var4, r"TransferAxisPtCrvToOriList" )
        VCmd.Accept( var4 )
        VCmd.Quit( var4 )
        i = i + 1

    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("orientations assigned\n")
    VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\"+RTMF+"_flowUnassigned.vdb", 0 )
    
def regions(var1,RTMfile,RTMF):
    #Defines regions for boundary conditions.
    z = 0
    zMax = z + 2
    zMin = z - 2
    file = RTMF+".inp"
    nodes  = getNodes(file,zMin=zMin,zMax=zMax)
    orig_nodes = np.copy(nodes)
    ros_nodes = np.zeros([12,4])
    node_len = np.size(nodes,0)
    BCs = np.loadtxt(open("D:\\sysi\\temporary\\braidsegments.csv", "rb"), delimiter=",")
    
    #here add LocalToGlobal to translate the nodes into correct coordinates
    refPTS = np.loadtxt(open("D:\\sysi\\temporary\\secPTS.csv","rb"), delimiter=",")
    secVECz = np.loadtxt(open("D:\\sysi\\temporary\\secVECz.csv","rb"), delimiter=",")
    secVECy = np.loadtxt(open("D:\\sysi\\temporary\\secVECy.csv","rb"), delimiter=",")
    secPTS = refPTS
    
    #The segmentation boundaries are translated into local coordinate systems.
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("yupyup2\n")
    step = refPTS[0,2]
    u = 0
    while u < np.size(nodes,0):
        uu = 0
        while uu < np.size(refPTS,0):
            if refPTS[uu,2]-step <= nodes[u,3] <= refPTS[uu,2]+step:
                secVECx = np.cross(secVECy[uu,:],secVECz[uu,:])
                cSYS2 = np.array(([secVECx[0],secVECx[1],secVECx[2]],[secVECy[uu,0],secVECy[uu,1],secVECy[uu,2]],[secVECz[uu,0],secVECz[uu,1],secVECz[uu,2]]))
                point1 = np.array([0,0,0])
                point2 = np.array([secPTS[uu,0],secPTS[uu,1],secPTS[uu,2]])
                cSYS1 = np.array(([1,0,0],[0,1,0],[0,0,1]))
                GCP = np.array([nodes[u,1],nodes[u,2],nodes[u,3]])
                kopyto = GlobalToLocal(point1,point2,cSYS1,cSYS2,GCP)
                nodes[u,1] = kopyto[0]
                nodes[u,2] = kopyto[1]    
            uu = uu + 1
        u = u + 1
    np.savetxt("D:\\sysi\\Temporary\\verify_toolbox2.csv",nodes,delimiter=",")
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("eaiho2\n")
    
    #Segment the root of the spar for varying flow rate. Also record a node for
    #each segment for rosette placement.
    ii = 0
    while ii < 12:
        i = 0
        nSTR = ""
        while i < node_len:
            if (BCs[ii,2]< nodes[i,1] <BCs[ii,1]) and (BCs[ii,4] < nodes[i,2] < BCs[ii,3]):  
                nSTR = nSTR+" Node  "+str(int(nodes[i,0]))+r" / "+str(int(nodes[i,0]))+" "
                nSTR = nSTR+r"|"
                #for rosettes (using global coordinates)
                ros_nodes[ii,0] = nodes[i,0]
                ros_nodes[ii,1] = orig_nodes[i,1]
                ros_nodes[ii,2] = orig_nodes[i,2]
                ros_nodes[ii,3] = orig_nodes[i,3]
            i = i + 1            
        nSTR = nSTR[:-1]      
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("crash-checkc"+str(ii)+"_____"+nSTR+"___"+"\n")         
        #__________________ UserDefineRegion BEGIN __________________ REGION FOR flow rate
        var14=VCmd.Activate( 1, r"VMeshModeler.VmmICommandGui", r"UserDefineRegion" )
        VCmd.SetStringValue( var14, r"Type", r"Node" )
        str_name = "ForFlow"+str(ii)
        VCmd.SetStringValue( var14, r"Name", str_name )
        VCmd.SetIntValue( var1, r"Visible Selection", 1 )
        #nSTR =r" Node  121 / 121 | Node  122 / 122 | Node  123 / 123 | Node  126 / 126  "
        lst1_count,lst1 =  VScn.StringList(nSTR)
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        VCmd.Accept( var14 )
        VCmd.Cancel( var14 )
        VCmd.Quit( var14 )
        ii  = ii + 1
    
    #Assign vent. All nodes at maximum span.
    z = span
    zMax = z + 2
    zMin = z - 2
    nodes  = getNodes(file,zMin=zMin,zMax=zMax)
    node_len = np.size(nodes,0)
    i = 0
    nSTR = ""
    while i < node_len:
        nSTR = nSTR+" Node  "+str(int(nodes[i,0]))+r" / "+str(int(nodes[i,0]))+" "
        if i != (node_len-1):
            nSTR =nSTR+r"| "
        i = i + 1
        
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("check the working one_____"+nSTR+"___"+"\n")
    #_____________Region for vent____________
    var19=VCmd.Activate( 1, r"VMeshModeler.VmmICommandGui", r"UserDefineRegion" )
    VCmd.SetStringValue( var19, r"Type", r"Node" )
    VCmd.SetStringValue( var19, r"Name",r"ForVent" )
    VCmd.SetIntValue( var1, r"Visible Selection", 1 )
    lst1_count,lst1 =  VScn.StringList(nSTR)
    VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
    VCmd.Accept( var19 )
    VCmd.Cancel( var19 )
    VCmd.Quit( var19 )
    
    #Assign temperature to all nodes.
    zMin = -10000
    zMax = 10000
    nodes  = getNodes(file,zMin=zMin,zMax=zMax)
    node_len = np.size(nodes,0)
    i = 0
    nSTR = ""
    while i < node_len:
        nSTR = nSTR+" Node  "+str(int(nodes[i,0]))+r" / "+str(int(nodes[i,0]))+" "
        if i != (node_len-1):
            nSTR =nSTR+r"| "
        i = i + 1
    #_____________Region for vent____________
    var199=VCmd.Activate( 1, r"VMeshModeler.VmmICommandGui", r"UserDefineRegion" )
    VCmd.SetStringValue( var199, r"Type", r"Node" )
    VCmd.SetStringValue( var199, r"Name",r"AllNodes" )
    VCmd.SetIntValue( var1, r"Visible Selection", 1 )
    lst1_count,lst1 =  VScn.StringList(nSTR)
    VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
    VCmd.Accept( var199 )
    VCmd.Cancel( var199 )
    VCmd.Quit( var199 )    
    
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("BC regions created\n")
        
    #VExpMngr.ExportFile( "D:\\IDPcode\\SpecialRTMTestIDP\\IDP_zip_2.0\\IDPcode\\pamrtm\\mainSimFiles\\"+RTMfile+"_flowUnassigned.vdb", 0 )
    return(ros_nodes)
    
def flowRate(FR,I_T,I_P):
    #Assigns flow rate based on input parameters. The flow-rate for each section
    #at any point in time is defined by a matrix.
    i = 0
    flowM  = np.load(r"D:\\sysi\\temporary\\flowMAT.npy")
    while i < 12:
        #Define flow rate 
        strt = r"Flow Rate_"+str(i)
        valt = I_T
        valp = I_P
        hmpf = i + 1
        strt2 = " "+str(hmpf)+r"=>USER_ForFlow"+str(i)+"  "      
        var41=VCmd.Activate( 1, r"VRTMUtilities.VRTMInterface", r"BoundaryConditions" )
        VCmd.SetStringValue( var41, r"ActiveBcType", r"Volume Flow Rate" )
        VCmd.SetGuStringValue( var41, r"OpeningMode", r"CreateSpecificType" )
        ret=VCmd.ExecuteCommand( var41, r"CreateNew" )
        VCmd.SetStringValue( var41, r"BcName", strt )
        VCmd.SetStringValue( var41, r"ActiveBcParam", r"flowRate" )
        VCmd.SetStringValue( var41, r"ParamValue", r"F(t)" )
        ret=VCmd.ExecuteCommand( var41, r"UpdateCurve" )
        VCmd.SetStringValue( var41, r"ActiveProperty", r"flowRate" )
        VCmd.SetStringValue( var41, r"PropertyValueUnit", r"m^3/sec" )
        VCmd.SetStringValue( var41, r"PropertyFuncUnit", r"sec" )
        ret=VCmd.ExecuteCommand( var41, r"UpdateParamForUnit" )
        ii = 0
        nSTR = ""
        while ii < np.size(flowM,0):
            nSTR = nSTR+" "+str(ii)+"  "+str(flowM[ii,(i)])+" | "
            ii = ii + 1
        lst1_count,lst1 =  VScn.Point2List( nSTR  )
        #Other parameters
        VCmd.SetPoint2ArrayValue( var41, r"PropertyTValue", lst1_count, lst1 )
        VCmd.SetStringValue( var41, r"ActiveBcParam", r"temperatureValue" )
        VCmd.SetDoubleValue( var41, r"ParamDoubleValue", valt  )
        VCmd.SetStringValue( var41, r"ActiveBcParam", r"maxPressure" )
        VCmd.SetDoubleValue( var41, r"ParamDoubleValue", valp  )
        lst1_count,lst1 =  VScn.StringList( strt2  )
        VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
        ret=VCmd.ExecuteCommand( var41, r"UpdateSelectionMaster" )
        VCmd.Accept( var41 )
        VCmd.Quit( var41 )   
        i = i + 1

    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("flow rate assigned\n")
    
def vent(V_P):
    #Assigns the vent region and parameters.
    #__________________ BoundaryConditions BEGIN __________________
    var4=VCmd.Activate( 1, r"VRTMUtilities.VRTMInterface", r"BoundaryConditions" )
    VCmd.SetStringValue( var4, r"ActiveBcType", r"Vent" )
    VCmd.SetGuStringValue( var4, r"OpeningMode", r"CreateSpecificType" )
    ret=VCmd.ExecuteCommand( var4, r"CreateNew" )
    VCmd.SetStringValue( var4, r"BcName", r"Vent_1" )
    VCmd.SetStringValue( var4, r"ActiveBcParam", r"ventPressure" )
    VCmd.SetDoubleValue( var4, r"ParamDoubleValue", V_P  )
    ret=VCmd.ExecuteCommand( var4, r"PickEntities" )
    lst1_count,lst1 =  VScn.StringList( r" 2=>USER_ForVent  "  )
    VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
    ret=VCmd.ExecuteCommand( var4, r"UpdateSelectionMaster" )
    VCmd.Accept( var4 )
    VCmd.Quit( var4 )
    
    with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
        text_file.write("vent specified")
        
def tool(T_T):
    #Assigns temperature on all nodes.
    var27=VCmd.Activate( 1, r"VRTMUtilities.VRTMInterface", r"BoundaryConditions" )
    VCmd.SetStringValue( var27, r"ActiveBcType", r"Temperature" )
    VCmd.SetGuStringValue( var27, r"OpeningMode", r"CreateSpecificType" )
    ret=VCmd.ExecuteCommand( var27, r"CreateNew" )
    VCmd.SetStringValue( var27, r"BcName", r"Temperature_1" )
    lst1_count,lst1 =  VScn.StringList( r" 3=>USER_AllNodes  "  )
    VCmd.SetStringArrayValue( var1, r"ListSelection", lst1_count, lst1 )
    ret=VCmd.ExecuteCommand( var27, r"UpdateSelectionMaster" )
    VCmd.SetStringValue( var27, r"ActiveBcParam", r"temperatureValue" )
    VCmd.SetDoubleValue( var27, r"ParamDoubleValue", T_T  )
    VCmd.Accept( var27 )
    VCmd.Quit( var27 )
    
def getNodes(file,xMax = 10000, xMin = -10000,yMax = 10000,yMin=-10000,zMax=10000,zMin = -10000):
    #This section helps to collect nodes for specific region in 3D space.
    eef = open("D:\\sysi\\pamrtm\\mainSimFiles\\"+file, "rt")
    ee = eef.read() 
    ee = ee.split("*NODE")[1]
    ee = ee.split("*")[0]
    #changelog: 30/09/2019 - nodelist turn into node matrix with x,y,z
    node_list = np.zeros([1,4])
    nlt = np.zeros([1,4])
    coms = ee.count(',')
    i = 0 
    print(xMin,xMax,yMin,yMax,zMin,zMax)
    while i < coms:
        if i ==0:
            node = int(ee.split(",")[i])
        else:
            node = ee.split(",")[i]
            nlt[0,0] = int(node.split()[1])
        nlt[0,1] = float(ee.split(",")[i+1])
        nlt[0,2] = float(ee.split(",")[i+2])
        z = ee.split(",")[i+3]
        z = z.split()[0]
        nlt[0,3] = float(z)
        #print("x="+str(x)+",y="+str(y)+",z="+str(z))
        if xMin < nlt[0,1] < xMax and yMin < nlt[0,2] < yMax and zMin < nlt[0,3] < zMax:
            node_list = np.concatenate((node_list, nlt),0)
        i = i + 3     
    node_list = np.delete(node_list, (0), axis=0)  
    eef.close()
    print(node_list)
    return(node_list)


def saving(RTMfile,INITIAL):
    
    if INITIAL == 0:
        VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\"+RTMfile+"_orig.vdb", 0 )
        VExpMngr.ExportFile( "D:\\sysi\\pamrtm\\mainSimFiles\\"+RTMfile+".vdb", 0 )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("model saved, simulation ready\n")
    #Not to overwrite original file when adding flow mesh:
    else:
        VExpMngr.ExportFile( "D:\\IDPcode\\pamrtm\\mainSimFiles\\"+RTMfile+"_adjusted.vdb", 0 )
        with open("D:\\sysi\\pamrtm\\mainSimFiles\\currentProgress.txt", "a") as text_file:
            text_file.write("adjusted model saved, simulation ready\n")        
    
def run():
    #Can be also run from RTM_run separately if needed.
    var4=VCmd.Activate( 1, r"VRTMUtilities.VRTMInterface", r"SolverManager" )
    ret=VCmd.ExecuteCommand( var4, r"RUN" )
    ret=VCmd.ExecuteCommand( var4, r"OpenLogFile" )
    VScn.ExecutePythonInterpeter(r"C:\Program Files\ESI Group\Visual-Environment\15.0\COMMON\Resources\VisualProcessExec\user_scripts\CompositeLoadResult.py")
    #C:\Program Files\ESI Group\PAM-COMPOSITES\2019.0\RTMSolver\bin
    #C:\Program Files\ESI Group\Visual-Environment\14.5\COMMON\Resources\VisualProcessExec\user_scripts\CompositeLoadResult.py

var1 = initiate(filename)
US = asnSurf(var1,INITIAL)
automesh(meshsize,RTMfile,RTMF)
simPar(resin)
ros_nodes = regions(var1,RTMfile,RTMF) 
rosalia(ros_nodes)
defMat()
layupManager(var1,INITIAL,US,NL)
oPart(RTMF)
flowRate(FR,I_T,I_P)
vent(V_P)
tool(T_T)
saving(RTMfile,INITIAL)
#run()


